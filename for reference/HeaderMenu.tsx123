import { Burger, Center, Container, Group, Menu, Image } from "@mantine/core";
import { useDisclosure } from "@mantine/hooks";
import { IconChevronDown } from "@tabler/icons-react";
import { useNavigate } from "react-router-dom";
import { useAuth, useSigninCheck } from "reactfire";
import { useStore } from "src/state/Store";
import zypadelLogo from "src/assets/zypadelLogo.webp";
import classes from "./HeaderMenu.module.css";
import cx from "clsx";

interface HeaderProps {
  links: {
      link: string;
      label: string;
      logInRequired?: boolean;
      adminLogInRequired?: boolean;
  }[];
}

// const links = [
//     { link: "/about", label: "Features" },
//     {
//         link: "#1",
//         label: "Learn",
//         links: [
//             { link: "/docs", label: "Documentation" },
//             { link: "/resources", label: "Resources" },
//             { link: "/community", label: "Community" },
//             { link: "/blog", label: "Blog" },
//         ],
//     },
//     { link: "/about", label: "About" },
//     { link: "/pricing", label: "Pricing" },
//     {
//         link: "#2",
//         label: "Support",
//         links: [
//             { link: "/faq", label: "FAQ" },
//             { link: "/demo", label: "Book a demo" },
//             { link: "/forums", label: "Forums" },
//         ],
//     },
// ];

export function HeaderMenu({ links }: HeaderProps) {
    const { data: signInCheckResult } = useSigninCheck();
    const activeLink = useStore((state) => state.activeLink);
    const setActiveLink = useStore((state) => state.setActiveLink);
    let auth = useAuth();
    let navigate = useNavigate();
    const [opened, { toggle }] = useDisclosure(false);

    const items = links.map((link) => {
        // const menuItems = link.links?.map((item) => <Menu.Item key={item.link}>{item.label}</Menu.Item>);

        // if (menuItems) {
            return (
                <Menu key={link.label} trigger="hover" transitionProps={{ exitDuration: 0 }} withinPortal>
                    <Menu.Target>
                        <a href={link.link} className={cx(classes.link, { [classes.linkActive]: activeLink === link.link })} onClick={(event) => event.preventDefault()}>
                            <Center>
                                <span className={classes.linkLabel}>{link.label}</span>
                                <IconChevronDown size="0.9rem" stroke={1.5} />
                            </Center>
                        </a>
                    </Menu.Target>
                    {/* <Menu.Dropdown>{menuItems}</Menu.Dropdown> */}
                </Menu>
            );
        // }

        return (
            <a key={link.label} href={link.link} className={classes.link} onClick={(event) => event.preventDefault()}>
                {link.label}
            </a>
        );
    });

    return (
        <header className={classes.header}>
            <Container size="md">
                <div className={classes.inner}>
                    <Image src={zypadelLogo} width={28} />
                    <Group gap={5} visibleFrom="sm">
                        {items}
                    </Group>
                    <Burger opened={opened} onClick={toggle} size="sm" hiddenFrom="sm" />
                </div>
            </Container>
        </header>
    );
}
